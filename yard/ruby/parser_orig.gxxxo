// https://github.com/goruby/goruby/blob/43c93d4f2611780d923d8616b9aed61bd013384b/parser/interface.go#L61
// https://github.com/goruby/goruby/blob/43c93d4f2611780d923d8616b9aed61bd013384b/object/kernel.go#L186
package ruby

import (
	"fmt"
	"go/token"
	"io/ioutil"
	"log"

	"github.com/glennsarti/puppet-strings-core-go/yard"
	"github.com/goruby/goruby/ast"
	"github.com/goruby/goruby/parser"
)

type (
	// Evaluator Puppet Strings YARD data_type_alias
	Evaluator struct {
		Registry *yard.Registry
	}
)

// Parse Parses a puppet language file
func Parse(fileName string, content string, registry *yard.Registry) {
	file, _ := ioutil.ReadFile(fileName)

	prog, _ := parser.ParseFile(token.NewFileSet(), fileName, file, 0)

	eval := Evaluator{
		Registry: registry,
	}
	eval.Eval(prog)
}

// Eval blah
func (e *Evaluator) Eval(node ast.Node) {
	xType := fmt.Sprintf("%T", node)
	//out := fmt.Sprintf("Evaluating: %s: %s", xType, node.String())
	out := fmt.Sprintf("Evaluating: %s %s", xType, node.TokenLiteral())
	log.Println(out)
	switch node.(type) {
	case *ast.Program:
		{
			e.evalProgram(node.(*ast.Program))
		}
	case *ast.ExpressionStatement:
		{
			e.evalExpressionStatement(node.(*ast.ExpressionStatement))
		}
	case *ast.ScopedIdentifier:
		{
			e.evalScopedIdentifier(node.(*ast.ScopedIdentifier))
		}
	case *ast.ContextCallExpression:
		{
			e.evalContextCallExpression(node.(*ast.ContextCallExpression))
		}
	case *ast.Identifier:
		{
		}
	case *ast.SymbolLiteral:
		{
		}
	default:
		xType := fmt.Sprintf("%T", node)
		log.Println("UNKNOWN ", xType, " ", node.String())
	}
}

func (e *Evaluator) evalProgram(node *ast.Program) {
	for _, statement := range node.Statements {
		if _, ok := statement.(*ast.Comment); ok {
			continue
		}
		e.Eval(statement)
	}
}

func (e *Evaluator) evalExpressionStatement(node *ast.ExpressionStatement) {
	e.Eval(node.Expression)
}

func (e *Evaluator) evalScopedIdentifier(node *ast.ScopedIdentifier) {
	e.Eval(node.Inner)
}

func (e *Evaluator) evalContextCallExpression(node *ast.ContextCallExpression) {

	log.Println("%%%%%", node.Context.String())

	// switch node.Function.Value {
	// case "create_function":{

	// }
	// }

	log.Println("!!!!!!!!!!!! ", node.Function.Value)
	e.Eval(node.Context)
	e.evalExpressions(node.Arguments)
	if node.Block != nil {
		e.Eval(node.Block)
	}
}

func (e *Evaluator) evalExpressions(exps []ast.Expression) {
	for _, exp := range exps {
		e.Eval(exp)
	}
}
